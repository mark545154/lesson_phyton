# - - - - - - - - - string[start_index:end_index:step] - - - - - # Напоминание
####################################################################
# 1. Проверить имя
# Вы создаете приложение, которое позволяет пользователям взаимодействовать и делиться
# своими идеями проекта кодирования в Интернете. Первый шаг - указать свое имя в
# приложении и приветствовать других людей, в котором содержится ваше имя. Давайте
# создадим функцию, которая сможет проверять, находится ли имя пользователя в его
# приветствии. Нам нужна функция, которая принимает два параметра: строку для нашего
# предложения и строку для имени. Функция должна вернуть True, если имя существует в
# строке (игнорируя любые различия в использовании заглавных букв).

# def check_name(string, name):
#     if name.lower() in string.lower():
#         return True
#     else:
#         return False
#
#
# print(check_name('Hello, Ann!', 'ann'))

####################################################################
# 2. Каждая вторая буква
# Для следующей задачи необходимо создать функцию, которая извлекает каждую вторую
# букву из строки и возвращает результирующую строку. Есть несколько способов решить
# эту проблему.

# def extracts(line):
#     result = line[1::2]
#     return result
#
#
# print(extracts('Привет всем!')) # рвтве!

####################################################################
# 3. Реверсия
# Вместо того, чтобы выбирать вторую букву, мы хотим перевернуть всю строку. Написать
# функцию, которая возвращает строку в обратном порядке (например, «Абра» вернется,
# как «арбА»)

# def flip_over(string):
#     result_string = string[-1::-1]
#     return result_string
#
#
# print(flip_over('Абра')) # арбА

####################################################################
# 4. Сделайте Спунеризм
# Спунеризм - это речевая ошибка, когда меняются местами первые слоги двух слов.
# Например, Спунеризм произносится, когда кто-то говорит «Belly Jeans» вместо «Jelly
# Beans».

# def spoonerism(string):
#     string1, string2 = string.split()
#     result = string2[:2] + string1[2:] + ' ' + string1[:2] + string2[2:]
#     return result
#
#
# print(spoonerism('Belly Jeans'))

####################################################################
# 5. Большая сумма
# Необходимо вычислить, какой список из двух входных данных имеет большую сумму.
# Мы будем перебирать каждый список и вычислять суммы, после этого мы сравним два и
# вернем, какой из них имеет большую сумму.

# numbers_list = [[5, 15, 5], [5, 5, 5]]
#
# sum_list = 0
# for summa in numbers_list:
#     if numbers_list[0] > numbers_list[1]:
#         summa = 'Первый список больше', sum(numbers_list[0])
#         print(summa)
#     elif numbers_list[1] > numbers_list[0]:
#         summa = 'Второй список больше', sum(numbers_list[1])
#         print(summa)
#     else:
#         print('Суммы списков равны', summa)

# ВТОРОЙ вариант
# summa = [sum(index) for index in numbers_list]
# print(summa)



####################################################################
# 6. Более 9000
# Мы конструируем приложение, которое способно измерять уровень мощности наших
# возможностей кодирования, и, в соответствии с требованиями, наши уровни мощности не
# могут превышать 9000. Из-за этого, когда мы перебираем список значений мощности, мы
# будет считать каждое из чисел, пока наша сумма не достигнет значения, превышающего
# 9000. Как только это произойдет, мы должны прекратить складывать числа и вернуть
# значение, на котором мы остановились.

new_list = []
new_list.append(0, 9000)
print(new_list)

####################################################################
# 7. Максимальное количество
# Вот вам более традиционная проблема кодирования. Эта функция будет использоваться
# для поиска максимального числа в списке чисел. Это можно сделать с помощью функции
# max () в Python, но в качестве задачи необходимо реализовать эту функцию вручную.


####################################################################
# 8. Перевернутый список
# Необходимо протестировать два списка, чтобы увидеть, является ли второй список
# обратным первому. Напишите функцию, реализующую данное сравнение списков
