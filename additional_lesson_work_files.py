###################################################################################
# - - - Модули Python для математических операций и получения данных по API. - - #
# Основы работы с библиотекой statistics
# Основы работы с библиотекой math
# Что такое API и как работать с библиотекой request


# Расчет средних величин.
# В библиотеке представлены следующие основные методы для расчета средних величин:
# mean()            - Арифметическое среднее.
# fmean()           - Быстрое среднее арифметическое с плавающей запятой.
# geometric_mean()  - Геометрическая средняя.
# harmonic_mean()   - Гармоническая средняя.
# median()          - Медиана.
# mode()            - Мода
# quantiles()       - Разделение данных на равные интервалы.


###################################################################################
# Задание
# Компания реализует оказание услуг в области ногтевого сервиса. Вас просят, как
# аналитика данных, рассчитать некоторую статистику по одной неделе. Имеются 3 списка,
# сгенерированных в результате работы в эту неделю:
# Первый список характеризует виды маникюра, которые делает данный салон:

import statistics

Nail_style = ['Шеллак', 'Френч', 'Обычный лак', 'Гель-лак', 'Акрил']  # Второй список характеризует цены на эти услуги:

price = [2000, 1500, 1000, 3000, 3200]
# Третий список показывает, сколько раз за неделю заказывали тот или иной вид маникюра
# соответственно
week = [4, 5, 4, 8, 6]
# Найти среднее значение, моду, медиану по выручке (цена умноженная на продажи).
revenue = [price[index] * week[index] for index in range(len(price))]
print(revenue)

# mean = sum(revenue) / len(revenue)
# print(mean)

rev_mean = statistics.mean(revenue)  # mean() - Это арифметическое среднее.
rev_median = statistics.median(revenue)  # median - это середина значения
rev_mode = statistics.mode(revenue)  # mode - Это значение которое чаще всего встречается

print(rev_mean, rev_median, rev_mode)

###################################################################################
# - - - - - - - - - - Модуль Math - - - - - - - - - - - #

# Этот модуль обеспечивает доступ к математическим функциям, определенным стандартом
# языка программирования ANSI C.
# Этот модуль обеспечивает следующие основные функции. Если явно не указано иное, все
# возвращаемые значения являются числами с плавающей запятой.
# math.ceil(x) – округление до бОльшего целого числа
# math.floor(x) – окрушление до меньшего целого числа
# math.fsum(iterable) Возвращает точную сумму значений с плавающей запятой в
# итерируемом объекте. Избегает потери точности, отслеживая несколько промежуточных
# частичных сумм:
# >>> sum([.1, .1, .1, .1, .1, .1, .1, .1, .1, .1])
# 0.9999999999999999
# >>> fsum([.1, .1, .1, .1, .1, .1, .1, .1, .1, .1])
# 1.0
# math.gcd - Возвращает наибольший общий делитель указанных целочисленных аргументов.
# Если какой-либо из аргументов не равен нулю, то возвращаемое значение является
# наибольшим положительным целым числом, являющимся делителем всех аргументов.
# Если все аргументы равны нулю, то возвращаемое значение равно 0. gcd() без аргументов
# возвращает 0.
# math.log(x[, base]) – возвращает натуральный логарифм от числа
# math.exp(x)¶ - Возвращает e в степени x, где e = 2,718281… — основание натуральных
# логарифмов.
# math.sqrt(x) – Возвращает корень квадратный от х.

###################################################################################
# Задание
# Написать приложение калькулятор, которое состоит из различных математических функций:
# Сложение (с использованием функции sum)
# Вычитание
# Умножение
# Деление
# Возведение в степень
# Корень квадратный из числа
# Расчет процента от числа.

import math


def calc(x_list, operation):
    if operation == '+':
        return math.fsum(x_list)
    elif operation == '-':
        return x_list[0] - x_list[1]
    elif operation == '**1/2':
        return math.sqrt(x_list[0]), math.sqrt(x_list[1])


print(calc([1, 2], '**1/2'))

###################################################################################
# - - - - - - - - - - - Библиотека Request - - - - - - - - - - #
# Библиотека requests является стандартным инструментом для составления HTTP-запросов
# в Python. Эта библиотека позволяет обращаться через запрос по протоколу HTTP к
# сторонним сервисам и получать данные через API систем

import requests

responce = requests.get('https://api.github.com')

responce_res = responce.json()  # разбиваем на json() файл
print(responce_res['current_user_url'])  # обращаемся по ключу к разбитому json() файлу, который был получен

print(responce)  # <Response [200]>
print(responce.status_code)  # 200
print(responce.text)  # Выводит данные
print(responce.content)  # Выводит данные строкой

###################################################################################
# Упражнения 4.
# Используя библиотеку requests и API
# https://www.weatherapi.com/my/fields.aspx реализовать приложение (с использованием
# функции), которое будет выводить в консоль сообщение о погоде (температура в градусах,
# ветер, осадки, и т.п. на ваше усмотрение в читабельном виде, например «Сейчас в (город) 2
# градуса С…». Название города вводить из консоли

import requests

responce = requests.get(
    'http://api.weatherapi.com/v1/current.json?key=6ebde4df1487453fbdf92557222606&q=Novosibirsk&aqi=no')

responce = responce.json()

print(responce)  # Выведет все данные json() файла
print(responce['current']['temp_c'])  # 33.0   выводит температуру в градусах C на 26.06.2022


###################################################################################
# Упражнение 2.
# Напишите функцию read_last(lines, file), которая будет открывать
# определенный файл file и выводить на печать построчно последние строки в количестве
# lines (на всякий случай проверим, что задано положительное целое число).
# Протестируем функцию на файле «song.txt» со следующим содержимым:
# На шагающих утят быть похожими хотят,
# быть похожими хотят не зря, не зря.
# Можно хвостик отряхнуть и пуститься в дальний путь
# И пуститься в дальний путь, крича "кря-кря".
# И природа хороша, и погода хороша,
# Нет, не зря поет душа, не зря, не зря.
# Даже толстый бегемот, неуклюжий бегемот
# От утят не отстает, кряхтит "кря-кря"

def read_last(lines, file):
    if lines > 0:
        with open(file, encoding='UTF-8') as song:
            song_lines = song.readlines()[-lines:]
            for index in song_lines:
                print(index.strip())


read_last(10, 'song.txt')


###################################################################################
# Упражнение 3. Требуется реализовать функцию longest_words(file), которая выводит
# слово, имеющее максимальную длину (или список слов, если таковых несколько).
# Протестировать на примере файла «song.txt».

def longest_words(file):
    with open(file, encoding='UTF-8') as song:
        words = song.read().split()
        max_length = len(max(words, key=len))
        words_length = [word for word in words if len(word) == max_length]
        if len(words_length) == 1:
            return words_length[0]
        return words_length


print(longest_words('song.txt'))
