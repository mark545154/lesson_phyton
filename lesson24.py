###################################################################################
# - - - Визуализация данных с использованием библиотек Matplotlib и Seaborn - - - #

# import pandas as pd
#
# orders = pd.read_csv('shoefly.csv', delimiter=';')
# # print(orders.head())
#
# df = pd.read_csv('sample11.csv', delimiter=',')
# df['vvp'] = [35, 40, 38, 28, 44]
#
# print(df.head())

###################################################################################
# Задание
# 1. Создайте DataFrame df, который содержит информацию о товарах, продаваемых в
# хозяйственном магазине. Добавьте в df столбец «Продано оптом?», Который
# указывает, продается ли продукт оптом или по отдельности. Итоговая таблица
# должна выглядеть так:
# Добавление столбца II
# Мы также можем добавить новый столбец, который будет одинаковым для всех строк в
# DataFrame. Вернемся к нашему примеру с инвентарем:

# import pandas as pd
#
# df = pd.DataFrame([[1, '3 inch screw', 0.50, 0.75],
#                    [2, '2 inch nail', 0.10, 0.25],
#                    [3, 'hammer', 3.00, 5.50],
#                    [4, 'screwdriver', 2.50, 3.00]],
#                   columns=['Product ID', 'Product Description', 'Cost to Manufacture', 'Price'])
#
# df['Sold in bulk?'] = ['Yes', 'Yes', 'No', 'No']
# df['In Stock?'] = True
# df['Облагается налогом?'] = 'Да'
# df['Налог на продажу'] = df.Price * 0.075  # Это 7,5 %
# df['Прибыль'] = df.Price - df['Cost to Manufacture']
#
# # print(df.columns.values)  # Можно посмотреть список столбцов не заглядывая в файл
# print(df)

###################################################################################
# Выполнение операций с колонками
# В предыдущем упражнении мы узнали, как добавлять столбцы в DataFrame.
# Часто столбец, который мы хотим добавить, связан с существующими столбцами, но
# требует более сложных вычислений, чем умножение или сложение.
# Например, представьте, что у нас есть следующая таблица клиентов.
# Немного раздражает, что в каждой строке используются разные заглавные буквы.
# Возможно, мы хотели бы сделать его более последовательным, сделав все буквы
# прописными.
# Мы можем использовать функцию apply, чтобы применить функцию к каждому значению
# в определенном столбце. Например, этот код перезаписывает существующие столбцы
# «Имя», применяя функцию upper к каждой строке в «Имя»

# import pandas as pd
#
# df = pd.DataFrame([['JOHN SMITH', 'john.smith@gmail.com'],
#                    ['Jane Doe', 'jdoe@yahoo.com'],
#                    ['joe schmo', 'joeschmo@hotmail.com']],
#                   columns=['Name', 'Email'])
#
# df['Name'] = df.Name.apply(str.upper)
# # df['Name'] = df.Name.str.upper()  # Аналогично, что и выше
# df['Lowercase Name'] = df.Name.apply(str.lower)
# print(df)

###################################################################################
# Лямбда-функции
# Функция — это объект, который может принимать какой-либо ввод, возможно, изменять
# его и возвращать какой-то вывод. В Python лямбда-функция — это однострочное
# сокращение для функции. Простая лямбда-функция может выглядеть так:

# my_lambda = lambda my_input: my_input + 2
#
# print(my_lambda(3))
# print(my_lambda(100))
# print(my_lambda(-2))
#
# is_substring = lambda my_string, big_string: my_string in big_string
#
# print(is_substring('string', 'big string'))  # True

###################################################################################
# Мы можем сделать это с помощью оператора if в нашей лямбда-функции с синтаксисом,
# который выглядит следующим образом:
# <ЧТО ВОЗВРАЩАТЬ, ЕСЛИ ЗАЯВЛЕНИЕ ВЕРНО> if <ЕСЛИ ЗАЯВЛЕНИЕ> else <ЧТО
# ВОЗВРАЩАТЬ, ЕСЛИ ЗАЯВЛЕНИЕ ЛОЖНО>
# Вот как может выглядеть наша функция check_if_A_grade:

# check_if_A_grade = lambda grade: 'Got an A!' if grade >= 90 else 'Did not get an A...'
#
# print(check_if_A_grade(95))

###################################################################################
# Задание
# 1. Создайте лямбда-функцию с именем contains_a, которая принимает входное слово
# и возвращает True, если вход содержит букву 'a'. В противном случае верните False.

# contains_a = lambda my_string: 'a' in my_string
#
# print(contains_a('hello'))  # False
# print(contains_a('name'))  # True

###################################################################################
# Задание
# 1. Создайте лямбда-функцию с именем long_string, которая принимает входную
# строку и возвращает True, если строка содержит более 12 символов. В противном
# случае верните False.

# long_string = lambda my_string: len(my_string) > 12
#
# print(long_string('hello'))

###################################################################################
# Задание
# 1. Создайте лямбда-функцию с именем end_in_a, которая принимает входную строку и
# возвращает True, если последний символ в строке - a. В противном случае верните
# False

# end_in_a = lambda my_string: my_string[-1] == 'a'  # my_string[-1]=='a' in my_string эквивалентно my_string[-1]=='a' and 'a' in my_string
#
# print(end_in_a('hola'))

###################################################################################
# Напоминаем, что для возврата разных выходных данных в зависимости от разных входных
# данных мы можем использовать if и else внутри нашей лямбда-функции:

# add_or_subtract = lambda input_number: input_number - 1 if input_number >= 0 else input_number + 1

# print(add_or_subtract(-3))


# add_or_subtract = lambda input_number: input_number ** 2 if input_number > 1 else input_number ** 3
#
# print(add_or_subtract(-3))


###################################################################################
# Задание
# 1. Создайте лямбда-функцию с именем even_or_odd, которая принимает целое число с
# именем num. Если число четное, верните «четное». Если число нечетное, верните
# «нечетное».

# even_or_odd = lambda num: 'четное' if num % 2 == 0 else 'нечетное'
#
# print(even_or_odd(77))

###################################################################################
# Задание
# 1. Создайте лямбда-функцию с именем multiple_of_three, которая принимает целое
# число с именем num. Если число кратно трем, верните «кратное трем». В
# противном случае верните «не кратное».

# multiple_of_three = lambda num: 'кратное трем' if num % 3 == 0 else 'не кратное'
#
# print(multiple_of_three(8))

###################################################################################
# Задание
# Создайте лямбда-функцию с именем rate_movie, которая принимает число с именем rating.
# Если рейтинг больше 8,5, верните «Мне понравился этот фильм». В противном случае
# верните «Этот фильм был не очень хорошим»

# rate_movie = lambda rating: 'Мне понравился этот фильм' if rating > 8.5 else 'Этот фильм был не очень хорошим'
#
# print(rate_movie(8.6))

###################################################################################
# Обзор лямбда-функции
# Лямбда-функция — это способ определения функции в одной строке кода. Обычно мы
# назначаем их переменной.
# Лямбда-функции работают со всеми типами переменных, а не только с целыми числами!
# Вот пример, который принимает строку, присваивает ее временной переменной x, а затем
# преобразует ее в нижний регистр:

# stringlambda = lambda x: x.lower()
# print(stringlambda("Oh Hi Mark!"))

###################################################################################
# Задание
# 1. Создайте лямбда-функцию mylambda, которая возвращает первую и последнюю
# буквы строки, при условии, что длина строки составляет не менее 2 символов

# mylambda = lambda my_string: my_string[0] + my_string[-1] if len(my_string) > 2 else 'Слово из двух букв'
# print(mylambda('hello'))

###################################################################################
# Обзор лямбда-функции: операторы If
# Мы можем сделать наши лямбды более сложными, используя модифицированную
# форму оператора if.
# Предположим, мы хотим платить рабочим полтора раза за сверхурочную работу (любую
# работу, превышающую 40 часов в неделю). Следующая функция преобразует
# количество часов в полтора часа с помощью оператора if

# def myfunction(x):
#     if x > 40:
#         return 40 + (x - 40) * 1.50
#
#     else:
#         return x
#
#
# # Ниже приведена лямбда-функция, которая делает то же самое:
# myfunction = lambda x: 40 + (x - 40) * 1.50 if x > 40 else x

# В общем, синтаксис функции if в лямбда-функции:
# lambda x: [OUTCOME IF TRUE] if [CONDITIONAL] else [OUTCOME IF FALSE]

###################################################################################
# Задание
# 1. Вы управляете веб-страницей довольно агрессивной видеоигры и хотите проверить,
# чтобы каждому пользователю было 13 лет или больше, когда он посещает сайт.
# Напишите лямбда-функцию, которая принимает введенный возраст и либо возвращает
# Добро пожаловать в BattleCity! если пользователю 13 лет или старше, или вам должно быть
# больше 13 лет, если он моложе 13. Ваша лямбда-функция должна называться mylambda

# mylambda = lambda age: 'Добро пожаловать в BattleCity!' if age >= 13 else 'вам должно быть больше 13 лет'
#
# print(mylambda(13))

###################################################################################
# Применение лямбда-функции к столбцу
# В Pandas мы часто используем лямбда-функции для выполнения сложных операций со
# столбцами. Например, предположим, что мы хотим создать столбец, содержащий
# поставщика электронной почты для каждого адреса электронной почты в следующей
# таблице
# Задание
# 1. Создайте лямбда-функцию get_last_name, которая принимает строку с чьими-либо
# именем и фамилией (например, Джон Смит) и возвращает только фамилию
# (например, Смит)

# import pandas as pd
#
# df = pd.DataFrame([['JOHN SMITH', 'john.smith@gmail.com'],
#                    ['Jane Doe', 'jdoe@yahoo.com'],
#                    ['joe schmo', 'joeschmo@hotmail.com']],
#                   columns=['Name', 'Email'])
#
# df['Name'] = df.Name.apply(str.upper)
# df['Lowercase Name'] = df.Name.apply(str.lower)
# df['Email Provider'] = df.Email.apply(lambda x: x.split('@')[-1])
# df['Last Name'] = df.Name.apply(lambda get_last_name: get_last_name.split(' ')[-1])
#
# print(df)

###################################################################################
# Применение лямбды к строке
# Мы также можем работать с несколькими столбцами одновременно. Если мы
# используем apply без указания одного столбца и добавляем аргумент axis = 1, входом в
# нашу лямбда-функцию будет вся строка, а не столбец. Для доступа к определенным
# значениям строки мы используем синтаксис row.column_name или row [‘column_name’].
# Предположим, у нас есть таблица, представляющая список покупок:
# Если мы хотим добавить цену с налогом для каждой строки, нам нужно будет просмотреть
# два столбца: «Цена» и «Облагается налогом?».
# Если облагается налогом? "Да", тогда нам нужно умножить Цену на 1,075 (для 7,5% налога
# с продаж).
# Если облагается налогом? Нет, у нас просто будет Цена, не умножая ее

# import pandas as pd
#
# df = pd.DataFrame([['Apple', 1.00, 'No'],
#                    ['Milk', 4.20, 'No'],
#                    ['Paper Towels', 5.00, 'Yes'],
#                    ['Light Bulbs', 3.75, 'Yes']],
#                   columns=['Item', 'Price', 'Is taxed?'])
#
# df['Облагается налогом?'] = df.apply(lambda row: row['Price'] * 1.075 if row['Is taxed?'] == 'Yes' else row['Price'], axis=1)
#
# print(df)

###################################################################################
# Задание
# 1. Если сотрудник проработал более 40 часов, ей необходимо оплачивать
# сверхурочную работу (в 1,5 раза больше обычной почасовой оплаты труда).
# Например, если служащая проработала 43 часа и зарабатывала 10 долларов в час, она
# получила бы 400 долларов за первые 40 часов работы и дополнительно 45 долларов за 3
# часа сверхурочной работы, что в сумме составит 445 долларов.
# Создайте лямбда-функцию total_earned, которая принимает входную строку с ключами
# hours_worked и hourly_wage и использует оператор if для расчета почасовой оплаты труда.
# 2. Используйте лямбда-функцию total_earned и примените, чтобы добавить столбец
# total_earned к df с общей суммой, заработанной каждым сотрудником

import pandas as pd

df = pd.read_csv('employees_lambda.csv', delimiter=';')
print(df)

df['total_earned'] = df.apply(lambda row: row['hours_worked'] * row['hourly_wage'] \
                    if row['hours_worked'] <= 40 \
                    else (40 * row['hourly_wage'] + (row['hours_worked'] - 40) * (row['hourly_wage'] * 1.5)), axis=1)
df.to_csv('new_employees_lambda.csv')

print(df)

###################################################################################
#

###################################################################################
#

###################################################################################
#

###################################################################################
#

###################################################################################
#

###################################################################################
#

###################################################################################
#

###################################################################################
#

###################################################################################
#

###################################################################################
#

###################################################################################
#

###################################################################################
#

###################################################################################
#

###################################################################################
#

###################################################################################
#

###################################################################################
#

###################################################################################
#
