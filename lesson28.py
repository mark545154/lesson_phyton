###################################################################################
# - - - Визуализация данных с использованием библиотек Matplotlib и Seaborn - - - #

import numpy as np
import pandas as pd

df = pd.read_csv('ShoeFlywithPrice.csv', delimiter='\t')
most_exurance = df.price.max()
# print(df.head())
# print(df[df['price'] == most_exurance])
num_colors = len(df.shoe_color.unique())
cheap_shoes = df.groupby('shoe_color').price.apply(
    lambda x: np.percentile(x, 25)).reset_index()  # Груперуем по цветам при помощи groupby по столбцу shoe_color
# print(cheap_shoes)


# Расчет агрегатных функций IV
# Иногда нам нужно сгруппировать по более чем одному столбцу. Мы можем легко сделать
# это, передав список имен столбцов в метод groupby.
# Представьте, что у нас есть сеть магазинов и есть данные о количестве продаж в разных
# местах в разные дни:

shoe_sells = df.groupby(['shoe_type', 'shoe_color']).id.count()
print(shoe_sells)

###################################################################################
# Базовый линейный график
# Линейные графики полезны для визуализации того, как переменная изменяется с
# течением времени.
# Некоторые возможные данные, которые будут отображаться в виде линейного графика:
# • средние цены на бензин за последнее десятилетие
# • вес человека за последние пару месяцев
# • средняя температура по долготе на разных широтах
# Используя методы Matplotlib, следующий код создаст простой линейный график с
# помощью .plot () и отобразит его с помощью .show ():

from matplotlib import pyplot as plt

x_values = [0, 1, 2, 3, 4]
y_values = [0, 1, 4, 9, 16]
plt.plot(x_values, y_values)
plt.show()

###################################################################################
# Задание
# 1. Мы собираемся построить простой график, показывающий, сколько кто-то тратил
# на обед за последнюю неделю. Сначала определите два списка days и money_spent,
# которые содержат следующие целые числа
# 2. Постройте дни на оси x и money_spent на оси y с помощью plt.plot ().
# 3. Покажите график, используя plt.show ().

from matplotlib import pyplot as plt

days = range(7)
money_spent = [10, 12, 12, 10, 14, 22, 24]

# Мы могли бы добавить расходы на обед друга для сравнения следующим образом:
money_spent_2 = [11, 14, 15, 15, 22, 21, 12]

plt.plot(days, money_spent)
plt.plot(days, money_spent_2)
plt.show()

# Linestyles
# Мы можем указать другой цвет для строки, используя ключевое слово color с именем
# цвета HTML или HEX-кодом:

plt.plot(days, money_spent, color='green')
plt.plot(days, money_spent_2, color='#1204ff')
plt.show()

# Мы также можем сделать линию пунктирной или пунктирной, используя ключевое слово
# linestyle.
# - - - - - ПРИМЕРЫ - - - - - - #
# # Dashed:
# plt.plot(x_values, y_values, linestyle='--')
# # Dotted:
# plt.plot(x_values, y_values, linestyle=':')
# # No line:
# plt.plot(x_values, y_values, linestyle=''
#  A circle:
# plt.plot(x_values, y_values, marker='o')
# # A square:
# plt.plot(x_values, y_values, marker='s')
# # A star:
# plt.plot(x_values, y_values, marker='*')

plt.xlabel('Дни недели')
plt.ylabel('Затраты на обед')
plt.title('Динамика затрат на обеды')

plt.plot(days, money_spent, color='green', linestyle='--', marker='o')
plt.plot(days, money_spent_2, color='#1204ff', linestyle='-.', marker='s')
plt.show()

###################################################################################
# Задание
# 1. Постройте график зависимости дохода от времени в виде фиолетовой
# («пурпурной») ('purple')пунктирной («--») линии.
# 2. Постройте график зависимости затрат от времени в виде линии с шестигранным
# цветом # 82edc9 и квадратными маркерами ('s').

plt.plot(days, money_spent, color='purple', linestyle='--', marker='o')
plt.plot(days, money_spent_2, color='#82edc9', linestyle='-.', marker='s')
plt.show()


###################################################################################
# Оси и метки
# Иногда может быть полезно увеличить или уменьшить масштаб графика, особенно если
# есть какие-то детали, которые мы хотим затронуть. Для увеличения мы можем
# использовать plt.axis (). Мы используем plt.axis (), передавая ему список в качестве
# входных данных. Этот список должен содержать:

from matplotlib import pyplot as plt

x = [0, 1, 2, 3, 4]
y = [0, 1, 4, 9, 16]
plt.plot(x, y)
plt.axis([0, 3, 2, 5])
plt.show()


###################################################################################
# Задание
# 1. Мы построили линию, показывающую чьи-то расходы на кофе за последние 12 лет.
# Запустите код, чтобы увидеть получившийся график.
# 2. Давайте изменим оси, чтобы увеличить масштаб нашей линейной диаграммы.
# Используйте plt.axis (), чтобы изменить оси так, чтобы ось x двигалась от 0 до 12, а
# ось y - от 2900 до 3100

from matplotlib import pyplot as plt

x = range(12)
y = [3000, 3005, 3010, 2900, 2950, 3050, 3000, 3100, 2980, 2980, 2920, 3010]
plt.plot(x, y)
plt.axis([4, 8, 2980, 3100])
plt.show()

###################################################################################
# Маркировка осей
# В конце концов, мы захотим показать эти графики другим людям, чтобы убедить их в
# важных тенденциях в наших данных. При этом мы хотим, чтобы наши сюжеты выглядели
# как можно более профессионально.
# Первым шагом на пути к профессионально выглядящему графику является добавление
# меток к осям x и y и присвоение графику названия.
# Мы можем пометить оси x и y с помощью plt.xlabel () и plt.ylabel (). Заголовок можно
# задать с помощью plt.title ().
# Для всех этих команд требуется строка, которая представляет собой набор символов в
# одинарных (') или двойных (") кавычках

from matplotlib import pyplot as plt

x = range(12)
y = [3000, 3005, 3010, 2900, 2950, 3050, 3000, 3100, 2980, 2980, 2920, 3010]
plt.plot(x, y)
plt.axis([4, 8, 2980, 3100])
plt.xlabel('Месяцы')
plt.ylabel('Затраты на кофе')
plt.title('Динамика затрат на кофе за год')
plt.show()

###################################################################################
#

from matplotlib import pyplot as plt

x_values = [0, 1, 2, 3, 4]
y_values = [0, 1, 4, 9, 16]

x = [1, 2, 3, 4]
y = [1, 2, 3, 4]
plt.subplot(1, 2, 1)
plt.plot(x_values, y_values)
plt.title('График 1')
plt.subplot(1, 2, 2)
plt.plot(x, y)
plt.title('График 2')
plt.show()


###################################################################################
# Мы определили для вас списки месяцев, температуры и flight_to_hawaii. Используя
# команду plt.subplot, постройте график зависимости температуры от месяцев в
# левом поле фигуры, состоящей из 1 строки с 2 столбцами
# 2. Постройте зависимости flight_to_hawaii от температуры на том же рисунке справа
# от вашего первого графика. Добавьте параметр «o» в конец вашего вызова к
# plt.plot, чтобы преобразовать график в диаграмму рассеяния, если хотите!
# 3. Покажите графики

from matplotlib import pyplot as plt

months = range(12)
temperature = [36, 36, 39, 52, 61, 72, 77, 75, 68, 57, 48, 48]
flights_to_hawaii = [1200, 1300, 1100, 1450, 850, 750, 400, 450, 400, 860, 990, 1000]
plt.subplot(1, 2, 1)
plt.plot(months, temperature)
plt.title('График температуры')
plt.subplot(1, 2, 2)
plt.plot(months, flights_to_hawaii, linestyle='', marker='o')
plt.title('График полета Гавайи')
plt.ylabel('Кол-во полётов')
plt.subplots_adjust(bottom=0.2)
plt.subplots_adjust(wspace=0.5)
plt.show()

###################################################################################
# Задание
# 1. Мы собираемся создать фигуру, состоящую из двух рядов графиков. В нем должны
# быть:
# один график в верхнем ряду
# два графика в нижнем ряду
# Начните с использования метода subplot для создания экземпляра subplot в верхней строке
# (прямоугольник со звездой в нем).
# 2. Постройте зависимость straight_line и x на выбранной вами подзаголовке.
# 3. Теперь используйте команду plt.subplot (), чтобы выбрать прямоугольник в первом
# столбце второй строки (тот, в котором квадрат на рисунке выше). Постройте график
# зависимости parabola от x в этом поле.
# 4. Теперь используйте команду plt.subplot (), чтобы выбрать поле во втором столбце
# второй строки (тот, в котором есть треугольник). Постройте зависимость cubic и x в
# этом поле.
# 5. Увеличьте интервал между горизонтальными частями графика до 0,35 и нижнее
# поле до 0,2

from matplotlib import pyplot as plt

x = range(7)
straight_line = [0, 1, 2, 3, 4, 5, 6]
parabola = [0, 1, 4, 9, 16, 25, 36]
cubic = [0, 1, 8, 27, 64, 125, 216]

plt.subplot(3, 1, 1)  # первая цифра - строки, вторая - столбцы, третья - индексы
plt.plot(x, straight_line)
plt.legend(['straight_line'])

plt.subplot(3, 2, 3)
plt.plot(x, parabola)

plt.subplot(3, 2, 4)
plt.plot(x, cubic)

plt.subplot(3, 2, 5)
plt.plot(x, straight_line)

plt.subplot(3, 2, 6)
plt.plot(x, parabola)
plt.legend(['parabola'])

plt.subplots_adjust(bottom=0.1)
plt.subplots_adjust(wspace=0.35)
plt.show()

###################################################################################
# Легенда
# Когда у нас есть несколько линий на одном графике, мы можем пометить их с помощью
# команды plt.legend ().
# Метод легенды принимает список с отображаемыми метками. Так, например, мы можем
# вызвать
# который отобразит легенду на нашем графике, пометив каждую строку:
# plt.legend () также может принимать аргумент ключевого слова loc, который позиционирует
# легенду на рисунке
# Примечание. Если вы решите не устанавливать значение для loc, по умолчанию будет
# выбрано «лучшее» местоположение.
# Например, мы можем вызвать plt.legend () и установить для loc значение 6, что переместит легенду в левую часть графика
# Иногда проще пометить каждую строку по мере ее создания. Если мы хотим, мы можем
# использовать метку ключевого слова внутри plt.plot (). Если мы выберем это, мы не
# передадим никаких меток в plt.legend (). Например

from matplotlib import pyplot as plt

plt.plot([0, 1, 2, 3, 4], [0, 1, 4, 9, 16], label='parabola')
plt.plot([0, 1, 2, 3, 4], [0, 1, 8, 27, 64], label='cubic')
plt.legend()
# plt.legend(['parabola', 'cubic'], loc='best')  # loc - это локация legend по графику

plt.show()

# plt.legend () также может принимать аргумент ключевого слова loc, который позиционирует
# легенду на рисунк


###################################################################################
# Задание
# 1. Мы нарисовали для вас три линии. Они отображают температуру за последний
# год в трех местах:
# • Хайрул (hyrule)
# • Какарико (какарико)
# • Долина герудо (герудо)
# Создайте список строк, содержащий «Hyrule», «Kakariko» и «Gerudo Valley», и
# сохраните его в переменной с именем legend_labels
# 2. Создайте легенду для графика, введя legend_labels в plt.legend ().
# 3. Установите легенду в центре диаграммы.

from matplotlib import pyplot as plt

months = range(12)
hyrule = [63, 65, 68, 70, 72, 72, 73, 74, 71, 70, 68, 64]
kakariko = [52, 52, 53, 68, 73, 74, 74, 76, 71, 62, 58, 54]
gerudo = [98, 99, 99, 100, 99, 100, 98, 101, 101, 97, 98, 99]
plt.plot(months, hyrule)
plt.plot(months, kakariko)
plt.plot(months, gerudo)
legend_labels = ['Хайрул', 'Какарико', 'Долина Герудо']

ax = plt.subplot(1, 1, 1)
plt.plot(months, hyrule)
plt.plot(months, kakariko)
plt.plot(months, gerudo)

ax.set_xticks([4, 6, 8])
ax.set_xticklabels(['april', 'june', 'august'])
ax.set_yticks([60, 70, 90, 100])

plt.legend(legend_labels)
plt.show()

###################################################################################
# Изменить метки
# Во всех наших предыдущих упражнениях наши команды начинались с plt .. Чтобы изменить
# метки на осях, нам нужно попробовать что-то немного другое.
# Поскольку наши графики могут иметь несколько подграфиков, мы должны указать, какой
# из них мы хотим изменить. Для этого мы вызываем plt.subplot () по-другому.
# ax = plt.subplot(1, 1, 1)
# Axe — это объект оси, и он позволяет нам изменять оси, принадлежащие определенному
# подзаголовку. Даже если у нас есть только один график, когда мы хотим изменить тики,
# нам нужно будет начать с вызова либо ax = plt.subplot (1, 1, 1), либо ax = plt.subplot (), чтобы
# получить наши оси.
# Предположим, мы хотим установить для наших x-меток 1, 2 и 4. Мы будем использовать
# следующий код
# - - - ПРИМЕР - - - - #
# Мы также можем изменить y-метки с помощью ax.set_yticks ().
# Если нам нужны специальные метки (например, строки), мы можем использовать команду
# ax.set_xticklabels () или ax.set_yticklabels (). Например, нам может потребоваться ось Y с
# отметками 0,1, 0,6 и 0,8, но обозначить их 10%, 60% и 80% соответственно. Для этого мы
# используем следующие команды:
# ax = plt.subplot()
# plt.plot([1, 3, 3.5], [0.1, 0.6, 0.8], 'o')
# ax.set_yticks([0.1, 0.6, 0.8])
# ax.set_yticklabels(['10%', '60%', '80%'])

from matplotlib import pyplot as plt

months = range(12)
temperature = [36, 36, 39, 52, 61, 72, 77, 75, 68, 57, 48, 48]
flights_to_hawaii = [1200, 1300, 1100, 1450, 850, 750, 400, 450, 400, 860, 990, 1000]

ax = plt.subplot(1, 2, 1)

plt.plot(months, temperature)
ax.set_xticks([2, 6, 8])

plt.title('График температуры')
plt.ylabel('Температура')

ax2 = plt.subplot(1, 2, 2)

plt.plot(months, flights_to_hawaii, linestyle='', marker='o')
ax2.set_xticks([3, 4, 6])

plt.title('График полета Гавайи')
plt.ylabel('Кол-во полётов')
plt.subplots_adjust(bottom=0.2)
plt.subplots_adjust(wspace=0.5)
plt.show()


###################################################################################
# Мы нарисовали для вас линейный график, представляющий долю пользователей,
# которые перешли на эту новую услугу с момента ее развертывания в январе. Сначала
# сохраните набор осей в переменной с именем ax. Мы будем использовать ax, чтобы
# установить отметки x и y и метки, чтобы сделать этот график более удобным для
# чтения
# 2. Используя Axe, установите x-метки, чтобы они соответствовали списку месяцев.
# 3. Установите метки x-tick в качестве списка month_names.
# 4. Обозначьте оси y как проценты, соответствующие значениям [0,10, 0,25, 0,5,
# 0,75], а не десятичные дроби

from matplotlib import pyplot as plt

plt.figure(figsize=(10, 6))

month_names = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
months = range(12)
conversion = [0.05, 0.08, 0.18, 0.28, 0.4, 0.66, 0.74, 0.78, 0.8, 0.81, 0.85, 0.85]
plt.xlabel("Months")
plt.ylabel("Conversion")

ax = plt.subplot()
plt.plot(months, conversion)
ax.set_xticks(months)
ax.set_xticklabels(month_names)
ax.set_yticks([0.1, 0.25, 0.5, 0.75])
ax.set_yticklabels(['10%', '25%', '50%', '75%'])

plt.savefig('convers.png')  # Сохранение в выбранном расширении
plt.savefig('convers.jpg')
plt.savefig('convers.svg')

plt.show()


###################################################################################
# Фигуры
# Когда мы строим много графиков, легко получить линии, которые были нанесены, но не
# отображены. Если мы не будем осторожны, эти «забытые» линии появятся на ваших новых
# графиках. Чтобы быть уверенным, что у вас нет случайных линий, вы можете использовать
# команду plt.close ('all'), чтобы очистить все существующие графики перед построением
# нового.
# Ранее мы узнали, как поместить два набора осей на одну фигуру. Иногда мы предпочли бы
# иметь две отдельные фигуры. Мы можем использовать команду plt.figure () для создания
# новых фигур и их размера, как мы хотим. Мы можем добавить ключевое слово figsize =
# (width, height), чтобы установить размер фигуры в дюймах. Мы используем круглые скобки
# ((и)) для передачи ширины и высоты, которые разделяются запятой (,).

# plt.figure(figsize=(10, 6))

###################################################################################
# Создав рисунок, мы можем сохранить его, чтобы использовать в презентации или на вебсайте. Мы можем использовать команду plt.savefig () для сохранения во многих различных
# форматах файлов, таких как png, svg или pdf. После построения мы можем вызвать
# plt.savefig ('name_of_graph.png'):

# plt.savefig('convers.png')  # Сохранение в выбранном расширении
# plt.savefig('convers.jpg')
# plt.savefig('convers.svg')

###################################################################################
# Задание
# 1. Определите три списка, x, y1 и y2, и заполните их целыми числами. Эти числа могут
# быть чем угодно, но было бы неплохо, если бы они были фактическими
# показателями, которые вы хотите сравнивать. Данные можно посмотреть на этом
# сайте: http://www.tylervigen.com/spurious-correlations
# 2. Постройте график зависимости y1 и x и отобразите график.
# 3. На том же графике постройте y2 vs x (после линии, где вы строите y1 vs x)
# 4. Сделайте линию y1 розовой линией, а линию y2 серой линией. Дайте обеим линиям
# круглые маркеры.
# 5. Дайте своему графику название «Две линии на одном графике», а ось X -
# «Великолепная ось X», а ось Y - «Потрясающая ось Y».
# 6. Создайте для графика легенду и поместите ее в правом нижнем углу.
# 7. Попробуйте применить различные методы, изученные в данном разделе. Может
# быть, сделайте какие-нибудь подграфики и разделите линии. Потренируйтесь с
# увеличением определенных частей графика или выбором определенных x- или y отметок для отображения

from matplotlib import pyplot as plt

plt.figure(figsize=(10, 9))  # создаём новую фигуру со своими размерами  figsize = (width, height)

x = [2018, 2019, 2020, 2021, 2022]
y1 = [102, 106, 110, 114, 118]
y2 = [105.2, 104.26, 102.31, 105.67, 117.83]

ax = plt.subplot(3, 1, 1)
ax.set_xticks([2018, 2019, 2020, 2021, 2022])
ax.set_xticklabels(['2018 год', '2019 год', '2020 год', '2021 год', '2022 год'])
ax.set_yticks([102, 106, 110, 114, 118])
ax.set_yticklabels(['102%', '106%', '110%', '114%', '118%'])
plt.plot(x, y1)
plt.subplots_adjust(hspace=0.1, left=0.15, right=0.95, bottom=0, wspace=0.1)
plt.title('Индексы потребительских цен на товары и услуги по РФ\n "Две линии на одном графике"', fontsize=10, fontweight="bold", color='#008080')
plt.xlabel('К соответствующему месяцу предыдущего года\n"Великолепная ось X"', fontsize=8, fontweight="bold", color='red')
plt.ylabel('Процент\n"Потрясающая ось Y"', fontsize=8, fontweight="bold", color='blue')
plt.plot(x, y1, color='#ffc0cb', marker='o')
plt.plot(x, y2, color='#A6AAAB', marker='o')
plt.legend(y2, loc='lower right', fontsize=7, shadow=True, framealpha=1, facecolor='#66DDAA', edgecolor='#057FDD', title='Легенда')

ax = plt.subplot(3, 3, 4)
ax.set_xticks([2018, 2020, 2022])
ax.set_xticklabels(['2018 год', '2020 год', '2022 год'])
ax.set_yticks([106, 110, 118])
ax.set_yticklabels(['106%', '110%', '118%'])
plt.plot(x, y2, color='#0060FA', linestyle='-.', marker='v')
plt.legend(y2, loc='upper center', fontsize=8, shadow=True, framealpha=1, facecolor='#FFDB00', edgecolor='red', title="I\'m legend")
plt.xlabel('"Великолепная ось X"', fontsize=8, fontweight="regular", color='orange')
plt.ylabel('"Потрясающая ось Y"', fontsize=8, fontweight="regular", color='green')

ax = plt.subplot(3, 2, 4)
ax.set_xticks([2018, 2019, 2020, 2021, 2022])
ax.set_xticklabels(['2018 год', '2019 год', '2020 год', '2021 год', '2022 год'], color='#0048BA')
ax.set_yticks([102, 110, 114, 118])
ax.set_yticklabels(['102%', '110%', '114%', '118%'], color='#00826F')
plt.plot(x, y1, color='#009B84', marker='s')
plt.subplots_adjust(hspace=0.5)
plt.legend(y1, loc='lower right', fontsize=6, shadow=True, framealpha=1, facecolor='#A9D300', edgecolor='red', title="I\'m legend")
plt.xlabel('"Ось X"', fontsize=8, fontweight="bold")
plt.ylabel('"Ось Y"', fontsize=8, fontweight="bold")

plt.show()
plt.savefig('графикДЗ.png')
plt.close('all')


