####################################################################
# Кейс 1. Имеются данные о заражении и смертности от коронавирусной инфекции в двух
# списках соответственно.
# Ill= [3.9, 4.4, 4.3, 4.6, 4.7]
# Deth=[900, 997, 1001, 1003, 987]
# Необходимо вывести в консоль:
# Долю умерших от заболевших по дням
# Среднее значение заражения за последние 5 дней
# Среднее значение умерших

# Ill = [3.9, 4.4, 4.3, 4.6, 4.7]
# Deth = [900, 997, 1001, 1003, 987]
#
#
# def illnes(ill_list, deth_list):
#     doli = []
#     for i in range(len(ill_list)):
#         doli.append(round(deth_list[i] / (ill_list[i] * 1000) * 100, 2))  # round(num, число сколько хотим видеть после запятой)
#     return doli
#
# print('Долю умерших от заболевших ', illnes(Ill, Deth))
#
# def sred(list1):
#     return sum(list1)/len(list1)
# print('Среднее значение заболевших ', sred(Ill))
# print('Среднее значение умерших ', sred(Deth))

####################################################################
# Кейс 2. В компании на входе при прикладывании пропуска к турникету имя пользователя
# заносится в список. В конце дня рассчитывается, сколько сотрудников было в этот день на
# в офисе, а также при запросе Роспотребнадзора в случае выявления коронавирусной
# инфекции необходима возможность проверки, был ли определенный сотрудник на
# рабочем месте.
# Вас просят реализовать данные требования. В консоль необходимо выводить, сколько
# сотрудников было в офисе в этот день, а также, был ли на работе сотрудник с
# подозрением на коронавирус.

# employees = ['Иванов', 'Петров', 'Сидоров', 'Тищенко', 'Берёзов', 'Яблоков']
# rospotreb = 'Тищенко'
#
#
# def korona(list_epl, ill_epl):
#
#     return len(list_epl), ill_epl in list_epl
#
#
# count_epl, in_place = korona(employees, rospotreb)
#
# print(f'В офисе было {count_epl} сотрудников, с подозрением на коронавирус присутствовал {in_place}.')

#################################################################### Описать и красиво вывести!!!
# Кейс 3.
# Имеются данные о продажах некоторой аптеки:
# Товары, которые продавала аптека на неделе: Спазмалгон (300 руб, купили 10 раз),
# Нуровен (500 руб, купили 6 раз), Ризин (124 руб, купили 12 раз), Назонекс (750 руб,
# купили 4 раза), Гиперон (567 руб, купили 5 раз), Боярышник (320 руб., купили 20 раз).
# Необходимо разработать приложение (с использованием функций), чтобы на выходе
# можно было получить средние данные о продажах, выручке, ценах, а также максимальное
# и минимальное значение. Всю статистику необходимо вывести в консоль

# drugs = ['Спазмалгон', 'Нуровен', 'Ризин', 'Назонекс', 'Гиперон', 'Боярышник']
# prices = [300, 500, 124, 750, 567, 320]
# quantity = [10, 6, 12, 4, 5, 20]
#
# def stat(catalog, price_list, sale_list):
#     mean_sale = sum(sale_list) / len(sale_list)
#     mean_price = sum(price_list) / len(price_list)
#
#     max_sale = max(sale_list)
#     max_price = max(price_list)
#
#     min_sale = min(sale_list)
#     min_price = min(price_list)
#
#     revenue = [(price_list[i] * sale_list[i]) / 7 for i in range(len(sale_list))]
#     return mean_sale, mean_price, max_sale, max_price, min_sale, min_price, revenue
#
# print(stat(drugs, prices, quantity))



# med_revenue = []
# med_sales = []
#
# for i in range(len(drugs)):
#     med_sales.append(quantity[i] / 7)
#     med_revenue.append((prices[i] * quantity[i]) / 7)
#
# med_sales = sum(quantity) / len(quantity)
# med_revenue = sales / sum(quantity)

####################################################################
# Даны карточки новых сотрудников.
# Фамилия, Имя, Отчество, возраст, пол, семейное положение (false – свободен), город, должность
# Необходимо добавить в карточки зарплату в соответствии с уровнем должности. Создайте
# функцию, добавляющую заработную плату в качестве последнего элемента в каждую карточку.
# cards = [['Астахов', 'Игорь', 'Александрович', 35, ‘Муж’, True, 'Москва', 'маркетолог'], ['Вавилова',
# 'Елена', 'Сергеевна', 40, True, True, 'Таганрог', 'бухгалтер'], ['Карелин', 'Андрей', 'Васильевич', 25,
# ‘Муж’, False, 'Подольск', 'специалист'], ['Воронова', 'Мария', 'Игоревна', 30, True, False, 'Москва',
# 'менеджер'], ['Остроумовна', 'Карина', 'Владимировна', 44, True, True, 'Подольск', 'маркетолог'],
# ['Борзов', 'Владимир', 'Андреевич', 40, ‘Муж’, False, 'Москва', 'начальник отдела']]
# spec = ['маркетолог', 'бухгалтер', 'менеджер', 'специалист']
# mid_manag = ['начальник отдела', 'главный бухгалтер']
# top_manag = ['директор']
# salary = [40000, 60000, 80000]
# Создайте функцию, добавляющую к заработной плате стимулирующую выплату. На вход функция
# получает карточку и сумму повышения.
# Руководство решило в День семьи, любви и верности поощрить сотрудников, находящихся в
# браке, стимулирующей надбавкой. Добавьте к заработной плате в карточки этих сотрудников,
# сумму равную 5тыс рублей.
# Создайте функцию, рассчитывающую отчисления из заработной платы сотрудника. На вход
# функция получает карточку сотрудника и переменную, содержащую процент отчисления.
# Допишите приложение с вызовом функций для выполнения задания ниже.
# Вывести на консоль данные о сотрудниках в формате:
# Фамилия, Имя, Отчество
# Должность, Заработная плата за вычетом налоговых отчислений
# Общие налоговые отчисления составили:
# Сумма страховых взносов составила:

# cards = [['Астахов', 'Игорь', 'Александрович', 35, 'Муж', True, 'Москва', 'маркетолог'],
#          ['Вавилова', 'Елена', 'Сергеевна', 40, 'Жен', True, 'Таганрог', 'бухгалтер'],
#          ['Карелин', 'Андрей', 'Васильевич', 25, 'Муж', False, 'Подольск', 'специалист'],
#          ['Воронова', 'Мария', 'Игоревна', 30, 'Жен', False, 'Москва', 'менеджер'],
#          ['Остроумовна', 'Карина', 'Владимировна', 44, 'Жен', True, 'Подольск', 'маркетолог'],
#          ['Борзов', 'Владимир', 'Андреевич', 40, 'Муж', False, 'Москва', 'начальник отдела']]
#
# spec = ['маркетолог', 'бухгалтер', 'менеджер', 'специалист']
# mid_manag = ['начальник отдела', 'главный бухгалтер']
# top_manag = ['директор']
# salary = [40000, 60000, 80000]
#
# ndfl = 0.13
# social = 0.3
#
# def salaries(cards):
#     for card in cards:
#         if card[-1] in spec:
#             card.append(salary[0])
#         elif card[-1] in mid_manag:
#             card.append(salary[1])
#         elif card[-1] in top_manag:
#             card.append(salary[2])
#
# salaries(cards)
#
# print(cards)
#
# def bonus(card, bonus_value):
#     card[-1] += bonus_value
#
# def nalog(cards, percent):
#     return cards[-1] * percent
#
# taxes = 0
# socstrah = 0
#
# for card in cards:
#     if card[-4] == True:
#         bonus(card, 5000)
#
#     print(f'''{card[0]}, {card[1]}, {card[2]}
#     {card[0-2]}, {card[-1] - nalog(card, ndfl)} ''')
#
#     taxes += nalog(card, ndfl)
#     socstrah += nalog(card, social)
#
# print(f'''Общие налоговые отчисления составили: {taxes}
# Сумма страховых взносов составила: {socstrah}''')
# print(cards)

#################################### Решение Лейлы Ибрагимовны
# cards = [['Астахов', 'Игорь', 'Александрович', 35, 'Муж', True, 'Москва', 'маркетолог'], ['Вавилова', \
#                                                                                           'Елена', 'Сергеевна', 40,
#                                                                                           'Жен', True, 'Таганрог',
#                                                                                           'бухгалтер'],
#          ['Карелин', 'Андрей', 'Васильевич', 25, \
#           'Муж', False, 'Подольск', 'специалист'], ['Воронова', 'Мария', 'Игоревна', 30, 'Жен', False, 'Москва', \
#                                                     'менеджер'],
#          ['Остроумовна', 'Карина', 'Владимировна', 44, 'Жен', True, 'Подольск', 'маркетолог'], \
#          ['Борзов', 'Владимир', 'Андреевич', 40, 'Муж', False, 'Москва', 'начальник отдела']]
#
# spec = ['маркетолог', 'бухгалтер', 'менеджер', 'специалист']
# mid_manag = ['начальник отдела', 'главный бухгалтер']
# top_manag = ['директор']
# salary = [40000, 60000, 80000]
#
# ndfl = 0.13
# social = 0.3
#
#
# def salaries(cards):
#     for card in cards:
#         if card[-1] in spec:
#             card.append(salary[0])
#         elif card[-1] in mid_manag:
#             card.append(salary[1])
#         elif card[-1] in top_manag:
#             card.append(salary[2])
#
#
# salaries(cards)
#
#
# def bonus(card, bonus_value):
#     card[-1] += bonus_value
#
#
# def contribution(card, percent):
#     return card[-1] * percent
#
#
# taxes = 0
# socsrtah = 0
#
# for card in cards:
#     if card[-4] == True:
#         bonus(card, 5000)
#
#     print(f'''{card[0]}, {card[1]}, {card[2]}
#            {card[0 - 2]}, {card[-1] - contribution(card, ndfl)} ''')
#
#     taxes += contribution(card, ndfl)
#     socsrtah += contribution(card, social)
#
# print(f'''Общие налоговые отчисления составили: {taxes}
# Сумма страховых взносов составила:  {socsrtah}''')
#
# print(cards)

####################################################################
# - - - - - - - - - - Кортежи - - - - - - - - - - - - -#

right_answers = (1, 2, 3, 2, 1, 3, 4, 2, 2, 1)
user_answers = [1,2,3,1,1,3,4,1,2,1]

result = 0

for i in range(len(right_answers)):
    if user_answers[i] == right_answers[i]:
        result += 1
print(result)

####################################################################

list_number = [1, 2, 3]
Tuple_number = tuple(list_number)
print(Tuple_number)













